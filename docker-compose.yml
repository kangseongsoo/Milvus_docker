version: '3.8'

services:
  # Milvus Standalone용 etcd
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  # Milvus Standalone용 MinIO
  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"  # MinIO Console
      - "9000:9000"  # MinIO API
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  # Milvus Standalone
  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.5
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      # 성능 최적화 설정
      MILVUS_QUERYNODE_CACHE_SIZE: 8589934592      # 8GB
      MILVUS_DATANODE_SEGMENT_SIZE: 536870912       # 512MB per segment
      MILVUS_ROOTCOORD_DMLCHANNEL_NUM: 16           # DML 채널 수
      MILVUS_COMMON_RETENTIONDAYS: 3                # 데이터 보관 기간
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"  # Milvus gRPC
      - "9091:9091"    # Milvus Metrics
    depends_on:
      - etcd
      - minio
    networks:
      - milvus

  # Attu - Milvus 관리 UI
  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.3.5
    environment:
      MILVUS_URL: milvus:19530
    ports:
      - "3000:3000"
    depends_on:
      - milvus
    networks:
      - milvus

  # PostgreSQL 15 (파티셔닝 지원)
  postgres:
    container_name: rag-postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dktkekf0215@#
      POSTGRES_DB: rag_db_chatty
      # 성능 최적화
      POSTGRES_SHARED_BUFFERS: 2GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 6GB
      POSTGRES_WORK_MEM: 64MB
      POSTGRES_MAINTENANCE_WORK_MEM: 512MB
    ports:
      - "5432:5432"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/postgres:/var/lib/postgresql/data
      - ../migrations:/docker-entrypoint-initdb.d  # 초기 스키마 자동 실행
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - milvus
    command:
      - postgres
      - -c
      - shared_buffers=2GB
      - -c
      - effective_cache_size=6GB
      - -c
      - work_mem=64MB
      - -c
      - maintenance_work_mem=512MB
      - -c
      - max_connections=200
      - -c
      - max_wal_size=2GB
      - -c
      - checkpoint_completion_target=0.9

networks:
  milvus:
    driver: bridge

volumes:
  etcd:
  minio:
  milvus:
  postgres:

